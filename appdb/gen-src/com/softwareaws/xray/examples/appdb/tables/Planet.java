/*
 * This file is generated by jOOQ.
 */
package com.softwareaws.xray.examples.appdb.tables;


import com.softwareaws.xray.examples.appdb.Appdb;
import com.softwareaws.xray.examples.appdb.Indexes;
import com.softwareaws.xray.examples.appdb.Keys;
import com.softwareaws.xray.examples.appdb.tables.records.PlanetRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Planet extends TableImpl<PlanetRecord> {

    private static final long serialVersionUID = -1700508093;

    /**
     * The reference instance of <code>appdb.planet</code>
     */
    public static final Planet PLANET = new Planet();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlanetRecord> getRecordType() {
        return PlanetRecord.class;
    }

    /**
     * The column <code>appdb.planet.id</code>.
     */
    public final TableField<PlanetRecord, UInteger> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>appdb.planet.name</code>.
     */
    public final TableField<PlanetRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * Create a <code>appdb.planet</code> table reference
     */
    public Planet() {
        this(DSL.name("planet"), null);
    }

    /**
     * Create an aliased <code>appdb.planet</code> table reference
     */
    public Planet(String alias) {
        this(DSL.name(alias), PLANET);
    }

    /**
     * Create an aliased <code>appdb.planet</code> table reference
     */
    public Planet(Name alias) {
        this(alias, PLANET);
    }

    private Planet(Name alias, Table<PlanetRecord> aliased) {
        this(alias, aliased, null);
    }

    private Planet(Name alias, Table<PlanetRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Planet(Table<O> child, ForeignKey<O, PlanetRecord> key) {
        super(child, key, PLANET);
    }

    @Override
    public Schema getSchema() {
        return Appdb.APPDB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PLANET_PRIMARY);
    }

    @Override
    public Identity<PlanetRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_PLANET;
    }

    @Override
    public UniqueKey<PlanetRecord> getPrimaryKey() {
        return Keys.KEY_PLANET_PRIMARY;
    }

    @Override
    public List<UniqueKey<PlanetRecord>> getKeys() {
        return Arrays.<UniqueKey<PlanetRecord>>asList(Keys.KEY_PLANET_PRIMARY);
    }

    @Override
    public Planet as(String alias) {
        return new Planet(DSL.name(alias), this);
    }

    @Override
    public Planet as(Name alias) {
        return new Planet(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Planet rename(String name) {
        return new Planet(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Planet rename(Name name) {
        return new Planet(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<UInteger, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
